/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visaotcc;

import Login.DadosDeSessao;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import controlador.GastosDao;
import controlador.PagamentoDao;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import modelo.Gastos;
import modelo.Pagamentos;

/**
 *
 * @author Caique
 */
public class AddCompraProduto extends javax.swing.JFrame {

    private ArrayList<String> nome = new ArrayList();
    private ArrayList<String> nomeDesc = new ArrayList();
    
    public static AddCompraProduto Compraform;
    Principal listarForm;

    /**
     * Creates new form AddCompraProduto
     */
    public AddCompraProduto() {
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/CC.png")).getImage());
        this.setTitle(DadosDeSessao.nomeSistema);
        
        this.itemlistener();
        
        this.preencherTabela();
        carregaComboBoxNome();
        carregaComboBoxNome2();
        this.HabilitarCadastrar();
        this.validarnumeros();
        //this.callback();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNovoProduto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxProdutoCadastrado = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldValorPago = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jFormattedTextFieldDataDeCompra = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableGastos = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxFormaPagamento = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxParcelas = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxFiltro = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldQtd = new javax.swing.JTextField();
        jButtonPDF = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Gastos Com a Escola");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Novo Gasto:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Gasto já Cadastrado:");

        jComboBoxProdutoCadastrado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione --" }));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Valor Pago:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Data de Compra:");

        try {
            jFormattedTextFieldDataDeCompra.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jTableGastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Produto", "Quantidade", "Data Compra", "Valor Pago", "Forma Pgt.", "Parcelas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableGastos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableGastosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableGastos);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Forma de Pagamento:");

        jComboBoxFormaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione --", "Crédito", "Débito", "Pix", "Dinheiro" }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Parcelas:");

        jComboBoxParcelas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione --", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x", "11x", "12x" }));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/add.png"))); // NOI18N
        jButton1.setText("ADD Registro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/excluir.png"))); // NOI18N
        jButton2.setText("Excluir Registro");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Filtrar Por Produto:");

        jComboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Selecione --" }));
        jComboBoxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltroActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setText("Quantidade:");

        jButtonPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/download-pequeno.jpg"))); // NOI18N
        jButtonPDF.setText("PDF");
        jButtonPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPDFActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/alterar.png"))); // NOI18N
        jButton3.setText("Alterar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldNovoProduto)
                                    .addComponent(jTextFieldValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxProdutoCadastrado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jFormattedTextFieldDataDeCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(34, 34, 34)
                                        .addComponent(jTextFieldQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxParcelas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField1)))
                            .addComponent(jLabel1))
                        .addGap(0, 56, Short.MAX_VALUE))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldNovoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxProdutoCadastrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextFieldDataDeCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBoxFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBoxParcelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jComboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void validarnumeros(){
        jTextFieldQtd.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char character = e.getKeyChar();
            if (!Character.isDigit(character) && character != '.' && Character.isLetter(character)) {
                e.consume(); // Impede a digitação do caractere
                JOptionPane.showMessageDialog(jTextFieldQtd, "Somente números são permitidos.");
            }
        }
    });
//      jTextFieldAnoReferencia.addKeyListener(new KeyAdapter() {
//        @Override
//        public void keyTyped(KeyEvent e) {
//            char character = e.getKeyChar();
//            if (!Character.isDigit(character) && character != '.' && Character.isLetter(character)) {
//                e.consume(); // Impede a digitação do caractere
//                JOptionPane.showMessageDialog(jTextFieldAnoReferencia, "Somente números são permitidos.");
//            }
//        }
//    });
        jTextFieldValorPago.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char character = e.getKeyChar();
            if (!Character.isDigit(character) && character != '.' && Character.isLetter(character)) {
                e.consume(); // Impede a digitação do caractere
                JOptionPane.showMessageDialog(jTextFieldValorPago, "Somente números são permitidos.");
            }
        }
    });
    }
    
    private void itemlistener(){
     // Adicione um ItemListener ao jComboBoxFormaPagamento
        jComboBoxFormaPagamento.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                // Atualize as opções da jComboBoxParcelas com base na forma de pagamento selecionada
                atualizarParcelas();
            }
        });
}
// Método para atualizar as opções da jComboBoxParcelas com base na forma de pagamento selecionada
    private void atualizarParcelas() {
        String formaPagamento = (String) jComboBoxFormaPagamento.getSelectedItem();

        // Limpe as opções existentes na jComboBoxParcelas
        jComboBoxParcelas.removeAllItems();

        // Adicione as opções relevantes com base na forma de pagamento selecionada
        if ("Crédito".equals(formaPagamento)) {
            for (int i = 1; i <= 12; i++) {
                jComboBoxParcelas.addItem(String.valueOf(i) + "x");
            }
        } else {
            // Se for Débito, Pix ou Dinheiro, adicione apenas a opção 1x
            jComboBoxParcelas.addItem("1x");
        }
    }
    public void HabilitarCadastrar() {
    jButton1.setEnabled(false); // Começa desativado

    // Crie um DocumentListener para monitorar os campos de texto
    DocumentListener documentListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            checkFields();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkFields();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkFields();
        }
    };

    // Adicione o DocumentListener aos campos relevantes
    jTextFieldNovoProduto.getDocument().addDocumentListener(documentListener);
    jTextFieldValorPago.getDocument().addDocumentListener(documentListener);
    jFormattedTextFieldDataDeCompra.getDocument().addDocumentListener(documentListener);
    jTextFieldQtd.getDocument().addDocumentListener(documentListener);
//    jTextFieldAnoReferencia.getDocument().addDocumentListener(documentListener);

    // Adicione um ActionListener para monitorar as ComboBoxes
    ActionListener comboBoxListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            checkFields(); // Quando as ComboBoxes forem alteradas, chame checkFields() para atualizar a habilitação do botão
        }
    };
    jComboBoxFormaPagamento.addActionListener(comboBoxListener);
    jComboBoxProdutoCadastrado.addActionListener(comboBoxListener);
    jComboBoxParcelas.addActionListener(comboBoxListener);
    //jComboBoxMês.addActionListener(comboBoxListener);
    // Verifique os campos uma vez para garantir que o botão esteja corretamente habilitado ou desabilitado inicialmente
    checkFields();
}
public class RedComboBoxRenderer extends DefaultListCellRenderer {
    private static final Color RED = Color.RED;

    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

        // Defina a cor do texto para vermelho
        setForeground(RED);

        return this;
    }
}
// Função para verificar os campos
public void checkFields() {
    String nomeproduto = jTextFieldNovoProduto.getText().trim();
    String produtocadastrado = (String) jComboBoxProdutoCadastrado.getSelectedItem();
    String formapagamento = (String) jComboBoxFormaPagamento.getSelectedItem();
    String Parcelas = (String) jComboBoxParcelas.getSelectedItem();
    String valor = jTextFieldValorPago.getText().trim();
    String datacompra = jFormattedTextFieldDataDeCompra.getText().trim();
    String quantidade = jTextFieldQtd.getText();

    // Resetando a cor para preto quando não há aviso
    jTextFieldNovoProduto.setForeground(Color.BLACK);
    jComboBoxProdutoCadastrado.setForeground(Color.BLACK);

    // Verifique se ambos os campos estão preenchidos
    if (!nomeproduto.isEmpty() && !"-- Selecione --".equals(produtocadastrado)) {
        // Se ambos estiverem preenchidos, exiba a mensagem e desative o botão
        jButton1.setEnabled(false);
        JOptionPane.showMessageDialog(this, "Escolha apenas um dos campos para o nome do produto.", "Aviso", JOptionPane.WARNING_MESSAGE);
        jTextFieldNovoProduto.setForeground(Color.RED);
        jComboBoxProdutoCadastrado.setForeground(Color.RED);
    } else {
        // Verifique se pelo menos um dos campos obrigatórios está preenchido
        if (nomeproduto.isEmpty() && "-- Selecione --".equals(produtocadastrado)
                || "  -  -    ".equals(datacompra)
                || valor.isEmpty()
                || quantidade.isEmpty()
                || "-- Selecione --".equals(formapagamento)
                || "-- Selecione --".equals(Parcelas)) {
            jButton1.setEnabled(false);
        } else {
            jButton1.setEnabled(true);
        }
    }

    try {
        // Faça verificações adicionais se necessário

    } catch (NumberFormatException e) {
        // Em caso de erro na conversão, desative o botão
        jButton1.setEnabled(false);
    }
}




    
    private void carregaComboBoxNome() {
    try {
        GastosDao dao = new GastosDao();
        List<Gastos> lista = dao.buscar(""); // Supondo que o método buscar retorne os pagamentos
        
        Set<String> nomesSet = new HashSet<>(); // Usando um Set para armazenar nomes únicos
        
        for (Gastos gastos : lista) {
            String nomeProduto = gastos.getNomeproduto();
            nomesSet.add(nomeProduto);
        }

        List<String> nomesListString = new ArrayList<>();
        nomesListString.add("-- Selecione --"); // Adicionando o item inicial
        
        for (String nome : nomesSet) {
            nomesListString.add(nome);
        }

        Collections.sort(nomesListString); // Classificando os nomes em ordem alfabética
        
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        for (String nome : nomesListString) {
            comboBoxModel.addElement(nome);
        }
        
        jComboBoxProdutoCadastrado.setModel(comboBoxModel);

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao carregar combobox de nomes: " + ex);
    }
}
private void carregaComboBoxNome2() {
    try {
        GastosDao dao = new GastosDao();
        List<Gastos> lista = dao.buscar(""); // Supondo que o método buscar retorne os pagamentos
        
        Set<String> nomesSet = new HashSet<>(); // Usando um Set para armazenar nomes únicos
        
        for (Gastos gastos : lista) {
            String nomeProduto = gastos.getNomeproduto();
            nomesSet.add(nomeProduto);
        }

        List<String> nomesListString = new ArrayList<>();
        nomesListString.add("-- Selecione --"); // Adicionando o item inicial
        
        for (String nome : nomesSet) {
            nomesListString.add(nome);
        }

        Collections.sort(nomesListString); // Classificando os nomes em ordem alfabética
        
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        for (String nome : nomesListString) {
            comboBoxModel.addElement(nome);
        }
        
        jComboBoxFiltro.setModel(comboBoxModel);

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao carregar combobox de nomes: " + ex);
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         String nomeproduto = jTextFieldNovoProduto.getText().isEmpty() ? (String)jComboBoxProdutoCadastrado.getSelectedItem() : jTextFieldNovoProduto.getText();
         Double valorpago = Double.valueOf(jTextFieldValorPago.getText().replaceAll(",", "."));
         String datacompra = jFormattedTextFieldDataDeCompra.getText();
         String formapagamento = (String)jComboBoxFormaPagamento.getSelectedItem();
         String parcelas = (String)jComboBoxParcelas.getSelectedItem();
         Integer quantidade = Integer.parseInt(jTextFieldQtd.getText());
         //Integer anoreferencia = Integer.parseInt(jTextFieldAnoReferencia.getText());
         //String mesreferencia = (String)jComboBoxMês.getSelectedItem();
         
         // Aplicando a conversão para um objeto java.util.Date
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        
        try {
        java.util.Date dataCompra = dateFormat.parse(datacompra);
        // Agora você tem a data no formato java.util.Date (dataPagamento)

        
        
        String[] partesData = datacompra.split("-"); // Agora dividindo a data pelo separador "-"

        int dia = Integer.parseInt(partesData[0]);
        int mes = Integer.parseInt(partesData[1]);
        int ano= Integer.parseInt(partesData[2]);

        boolean isBissexto = (ano % 4 == 0 && (ano % 100 != 0 || ano % 400 == 0));

        // Validar dias para meses que têm apenas 30 ou 31 dias
        if ((dia == 31 && (mes == 4 || mes == 6 || mes == 9 || mes == 11)) ||
            (dia > 29 && mes == 2) || // Fev. não pode ter mais que 29 dias
            (dia == 29 && mes == 2 && !isBissexto)) {
            JOptionPane.showMessageDialog(this, "Data inválida para o mês selecionado.");
            jFormattedTextFieldDataDeCompra.setForeground(Color.RED);
            return;
        }
         
         Gastos u = new Gastos(nomeproduto, valorpago, dataCompra, formapagamento, parcelas, quantidade /*anoreferencia, mesreferencia*/);



        try {
            GastosDao dao = new GastosDao();
            dao.inserir(u);
            Compraform.callback();
            Compraform.carregaComboBoxNome();

            JOptionPane.showMessageDialog(this, "registro inserido.");
            //this.dispose();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Erro" + e.getMessage());
        }
        }catch (ParseException e) {
        e.printStackTrace(); // Ou trate a exceção de acordo com a lógica do seu programa
        JOptionPane.showMessageDialog(this, "Formato de data inválido.");
        jFormattedTextFieldDataDeCompra.setForeground(Color.RED);
        return;
    }
          
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltroActionPerformed
        String nomeProdutoSelecionado = (String) jComboBoxFiltro.getSelectedItem();

        if (nomeProdutoSelecionado != null && !nomeProdutoSelecionado.isEmpty()) {
            try {
                // Verifica se "-- Selecione --" foi selecionado
                if ("-- Selecione --".equals(nomeProdutoSelecionado)) {
                    // Atualizar a tabela com todos os registros
                    preencherTabela();
                } else {
                    // Atualizar a tabela apenas com os registros do produto selecionado
                    preencherTabelaPorNome(nomeProdutoSelecionado);
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar tabela: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jComboBoxFiltroActionPerformed
    private void preencherTabelaPorNome(String nomeProduto) {
    DefaultTableModel modelo = (DefaultTableModel) jTableGastos.getModel();
    modelo.setNumRows(0);

    try {
        GastosDao dao = new GastosDao();
        List<Gastos> lista = dao.buscarPorNome(nomeProduto);

        for (Gastos obj : lista) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataPagamentoFormatada = dateFormat.format(obj.getDatacompra());

            String[] linha = {
                obj.getId().toString(),
                obj.getNomeproduto(),
                obj.getQuantidade().toString(),
                dataPagamentoFormatada,
//                obj.getMesreferencia(),
//                obj.getAnoreferencia().toString(),
                obj.getValorpago().toString(),
                obj.getFormapagamento(),
                obj.getParcelas(),
            };
            modelo.addRow(linha);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao Pesquisar. " + ex.getMessage());
    }
}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       int opcao = JOptionPane.showConfirmDialog(this, "Confirma exclusão?", "Excluir", JOptionPane.YES_NO_OPTION);

        if (opcao == JOptionPane.YES_OPTION) {
            int linhaSelecionada = jTableGastos.getSelectedRow();

            if (linhaSelecionada != -1) {
                Integer codPagamentos = Integer.parseInt(
                    jTableGastos.getModel().getValueAt(linhaSelecionada, 0).toString());

                try {
                    //Exclui do BD
                    GastosDao dao = new GastosDao();
                    dao.excluir(codPagamentos);
                    carregaComboBoxNome();
                    carregaComboBoxNome2();

                    //Remove linha da tabela
                    DefaultTableModel modelo = (DefaultTableModel) jTableGastos.getModel();
                    modelo.removeRow(linhaSelecionada);

                    JOptionPane.showMessageDialog(this, "Registro excluído com sucesso.");
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao excluir registro." + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um registro.");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPDFActionPerformed
        exportToPDF();
    }//GEN-LAST:event_jButtonPDFActionPerformed

    private void jTableGastosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableGastosMouseClicked
        if (evt.getClickCount() == 2) {
            //System.out.println("Duplo clique detectado.");
            this.AlterarGastos();
        }
    }//GEN-LAST:event_jTableGastosMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.AlterarGastos();
    }//GEN-LAST:event_jButton3ActionPerformed
private void AlterarGastos(){
            int linhaSelecionada = jTableGastos.getSelectedRow();

        if (linhaSelecionada != -1) {
            String id = jTableGastos.getModel().getValueAt(linhaSelecionada, 0).toString();

            AlterarGastos form = new AlterarGastos();
            form.setVisible(true);
            form.Compraform = this;
            form.mostrarGastos(id);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um registro.");
        }
    }
    private void exportToPDF() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Verifica se o nome do arquivo contém a extensão .pdf, adiciona se não estiver presente
            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".pdf")) {
                fileToSave = new File(filePath + ".pdf");
            }

            criarPDFComCabecalho(fileToSave); // Chama o método para criar o PDF com cabeçalho
            JOptionPane.showMessageDialog(null, "PDF created successfully!");
        }
    }

    private void criarPDFComCabecalho(File arquivoParaSalvar) {
        String textoCabecalho = "Relatório de Gastos";

        Document documento = new Document();
        try {
            PdfWriter.getInstance(documento, new FileOutputStream(arquivoParaSalvar));
            documento.open();

            PdfPTable tabelaPDF = new PdfPTable(jTableGastos.getColumnCount());
            tabelaPDF.setWidthPercentage(100);  // Define a largura da tabela como 100% da página

            PdfPCell celulaCabecalho = new PdfPCell(new Phrase(textoCabecalho));
            celulaCabecalho.setColspan(jTableGastos.getColumnCount());
            celulaCabecalho.setHorizontalAlignment(Element.ALIGN_CENTER);
            tabelaPDF.addCell(celulaCabecalho);

            // Adiciona cabeçalhos à tabela com formatação
            for (int i = 0; i < jTableGastos.getColumnCount(); i++) {
                PdfPCell cabecalhoCell = new PdfPCell(new Phrase(jTableGastos.getColumnName(i)));
                cabecalhoCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                tabelaPDF.addCell(cabecalhoCell);
            }

            // Adiciona dados da tabela ao PDF
            for (int rows = 0; rows < jTableGastos.getRowCount(); rows++) {
                for (int cols = 0; cols < jTableGastos.getColumnCount(); cols++) {
                    tabelaPDF.addCell(jTableGastos.getModel().getValueAt(rows, cols).toString());
                }
            }

            documento.add(tabelaPDF);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error creating PDF: " + e.getMessage());
        } finally {
            if (documento != null && documento.isOpen()) {
                documento.close();
            }
        }
    }
    
    public void callback() {
    System.out.println("Método de retorno de chamada chamado."); // Adicione esta linha
    this.preencherTabela();
    this.carregaComboBoxNome();
    this.carregaComboBoxNome2(); // Atualiza o jComboBoxFiltro
}

    private void preencherTabela() {
    DefaultTableModel modelo = (DefaultTableModel) jTableGastos.getModel();
    modelo.setNumRows(0);
    
    try {
        GastosDao dao = new GastosDao();
        List<Gastos> lista = dao.buscar();
         
        lista.sort(Comparator.comparing(g -> g.getDatacompra(), Comparator.reverseOrder()));

          
        for (Gastos obj : lista) {


            // Formatando a data antes de inseri-la na tabela
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataPagamentoFormatada = dateFormat.format(obj.getDatacompra());

            String[] linha = {
                obj.getId().toString(),
                obj.getNomeproduto(),
                obj.getQuantidade().toString(),
                dataPagamentoFormatada,
//                obj.getMesreferencia(),
//                obj.getAnoreferencia().toString(),
                obj.getValorpago().toString(),
                obj.getFormapagamento(),
                obj.getParcelas(),
            };
            modelo.addRow(linha);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao Pesquisar. " + ex.getMessage());
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCompraProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCompraProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCompraProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCompraProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AddCompraProduto().setVisible(true);
                Compraform = new AddCompraProduto();
                Compraform.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonPDF;
    private javax.swing.JComboBox<String> jComboBoxFiltro;
    private javax.swing.JComboBox<String> jComboBoxFormaPagamento;
    private javax.swing.JComboBox<String> jComboBoxParcelas;
    private javax.swing.JComboBox<String> jComboBoxProdutoCadastrado;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataDeCompra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTableGastos;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldNovoProduto;
    private javax.swing.JTextField jTextFieldQtd;
    private javax.swing.JTextField jTextFieldValorPago;
    // End of variables declaration//GEN-END:variables
}
